# Original source from Max Kellerman GemUO
# https://github.com/MaxKellermann/GemUO/blob/master/src/uo/compression.py

huffman_tree = [
    1, 2,  # 0
    3, 4,  # 1
    5, 0,  # 2
    6, 7,  # 3
    8, 9,  # 4
    10, 11,  # 5
    12, 13,  # 6
    -256, 14,  # 7
    15, 16,  # 8
    17, 18,  # 9
    19, 20,  # 10
    21, 22,  # 11
    -1, 23,  # 12
    24, 25,  # 13
    26, 27,  # 14
    28, 29,  # 15
    30, 31,  # 16
    32, 33,  # 17
    34, 35,  # 18
    36, 37,  # 19
    38, 39,  # 20
    40, -64,  # 21
    41, 42,  # 22
    43, 44,  # 23
    -6, 45,  # 24
    46, 47,  # 25
    48, 49,  # 26
    50, 51,  # 27
    -119, 52,  # 28
    -32, 53,  # 29
    54, -14,  # 30
    55, -5,  # 31
    56, 57,  # 32
    58, 59,  # 33
    60, -2,  # 34
    61, 62,  # 35
    63, 64,  # 36
    65, 66,  # 37
    67, 68,  # 38
    69, 70,  # 39
    71, 72,  # 40
    -51, 73,  # 41
    74, 75,  # 42
    76, 77,  # 43
    -101, -111,  # 44
    -4, -97,  # 45
    78, 79,  # 46
    -110, 80,  # 47
    81, -116,  # 48
    82, 83,  # 49
    84, -255,  # 50
    85, 86,  # 51
    87, 88,  # 52
    89, 90,  # 53
    -15, -10,  # 54
    91, 92,  # 55
    -21, 93,  # 56
    -117, 94,  # 57
    95, 96,  # 58
    97, 98,  # 59
    99, 100,  # 60
    -114, 101,  # 61
    -105, 102,  # 62
    -26, 103,  # 63
    104, 105,  # 64
    106, 107,  # 65
    108, 109,  # 66
    110, 111,  # 67
    112, -3,  # 68
    113, -7,  # 69
    114, -131,  # 70
    115, -144,  # 71
    116, 117,  # 72
    -20, 118,  # 73
    119, 120,  # 74
    121, 122,  # 75
    123, 124,  # 76
    125, 126,  # 77
    127, 128,  # 78
    129, -100,  # 79
    130, -8,  # 80
    131, 132,  # 81
    133, 134,  # 82
    -120, 135,  # 83
    136, -31,  # 84
    137, 138,  # 85
    -109, -234,  # 86
    139, 140,  # 87
    141, 142,  # 88
    143, 144,  # 89
    -112, 145,  # 90
    -19, 146,  # 91
    147, 148,  # 92
    149, -66,  # 93
    150, -145,  # 94
    -13, -65,  # 95
    151, 152,  # 96
    153, 154,  # 97
    -30, 155,  # 98
    156, 157,  # 99
    -99, 158,  # 100
    159, 160,  # 101
    161, 162,  # 102
    -23, 163,  # 103
    -29, 164,  # 104
    -11, 165,  # 105
    166, -115,  # 106
    167, 168,  # 107
    169, 170,  # 108
    -16, 171,  # 109
    -34, 172,  # 110
    173, -132,  # 111
    174, -108,  # 112
    175, -22,  # 113
    176, -9,  # 114
    177, -84,  # 115
    -17, -37,  # 116
    -28, 178,  # 117
    179, 180,  # 118
    181, 182,  # 119
    183, 184,  # 120
    185, 186,  # 121
    187, -104,  # 122
    188, -78,  # 123
    189, -61,  # 124
    -79, -178,  # 125
    -59, -134,  # 126
    190, -25,  # 127
    -83, -18,  # 128
    191, -57,  # 129
    -67, 192,  # 130
    -98, 193,  # 131
    -12, -68,  # 132
    194, 195,  # 133
    -55, -128,  # 134
    -24, -50,  # 135
    -70, 196,  # 136
    -94, -33,  # 137
    197, -129,  # 138
    -74, 198,  # 139
    -82, 199,  # 140
    -56, -87,  # 141
    -44, 200,  # 142
    -248, 201,  # 143
    -163, -81,  # 144
    -52, -123,  # 145
    202, -113,  # 146
    -48, -41,  # 147
    -122, -40,  # 148
    203, -90,  # 149
    -54, 204,  # 150
    -86, -192,  # 151
    205, 206,  # 152
    207, -130,  # 153
    -53, 208,  # 154
    -133, -45,  # 155
    209, 210,  # 156
    211, -91,  # 157
    212, 213,  # 158
    -106, -88,  # 159
    214, 215,  # 160
    216, 217,  # 161
    218, -49,  # 162
    219, 220,  # 163
    221, 222,  # 164
    223, 224,  # 165
    225, 226,  # 166
    227, -102,  # 167
    -160, 228,  # 168
    -46, 229,  # 169
    -127, 230,  # 170
    -103, 231,  # 171
    232, 233,  # 172
    -60, 234,  # 173
    235, -76,  # 174
    236, -121,  # 175
    237, -73,  # 176
    -149, 238,  # 177
    239, -107,  # 178
    -35, 240,  # 179
    -71, -27,  # 180
    -69, 241,  # 181
    -89, -77,  # 182
    -62, -118,  # 183
    -75, -85,  # 184
    -72, -58,  # 185
    -63, -80,  # 186
    242, -42,  # 187
    -150, -157,  # 188
    -139, -236,  # 189
    -126, -243,  # 190
    -142, -214,  # 191
    -138, -206,  # 192
    -240, -146,  # 193
    -204, -147,  # 194
    -152, -201,  # 195
    -227, -207,  # 196
    -154, -209,  # 197
    -153, -254,  # 198
    -176, -156,  # 199
    -165, -210,  # 200
    -172, -185,  # 201
    -195, -170,  # 202
    -232, -211,  # 203
    -219, -239,  # 204
    -200, -177,  # 205
    -175, -212,  # 206
    -244, -143,  # 207
    -246, -171,  # 208
    -203, -221,  # 209
    -202, -181,  # 210
    -173, -250,  # 211
    -184, -164,  # 212
    -193, -218,  # 213
    -199, -220,  # 214
    -190, -249,  # 215
    -230, -217,  # 216
    -169, -216,  # 217
    -191, -197,  # 218
    -47, 243,  # 219
    244, 245,  # 220
    246, 247,  # 221
    -148, -159,  # 222
    248, 249,  # 223
    -92, -93,  # 224
    -96, -225,  # 225
    -151, -95,  # 226
    250, 251,  # 227
    -241, 252,  # 228
    -161, -36,  # 229
    253, 254,  # 230
    -135, -39,  # 231
    -187, -124,  # 232
    255, -251,  # 233
    -162, -238,  # 234
    -242, -38,  # 235
    -43, -125,  # 236
    -215, -253,  # 237
    -140, -208,  # 238
    -137, -235,  # 239
    -158, -237,  # 240
    -136, -205,  # 241
    -155, -141,  # 242
    -228, -229,  # 243
    -213, -168,  # 244
    -224, -194,  # 245
    -196, -226,  # 246
    -183, -233,  # 247
    -231, -167,  # 248
    -174, -189,  # 249
    -252, -166,  # 250
    -198, -222,  # 251
    -188, -179,  # 252
    -223, -182,  # 253
    -180, -186,  # 254
    -245, -247,  # 255
]

huffmanTable = [
    0x2, 0x000, 0x5, 0x01F, 0x6, 0x022, 0x7, 0x034, 0x7, 0x075, 0x6, 0x028, 0x6, 0x03B, 0x7, 0x032, 0x8, 0x0E0, 0x8,
    0x062, 0x7, 0x056, 0x8, 0x079, 0x9, 0x19D, 0x8, 0x097, 0x6, 0x02A, 0x7, 0x057, 0x8, 0x071, 0x8, 0x05B, 0x9, 0x1CC,
    0x8, 0x0A7, 0x7, 0x025, 0x7, 0x04F, 0x8, 0x066, 0x8, 0x07D, 0x9, 0x191, 0x9, 0x1CE, 0x7, 0x03F, 0x9, 0x090, 0x8,
    0x059, 0x8, 0x07B, 0x8, 0x091, 0x8, 0x0C6, 0x6, 0x02D, 0x9, 0x186, 0x8, 0x06F, 0x9, 0x093, 0xA, 0x1CC, 0x8, 0x05A,
    0xA, 0x1AE, 0xA, 0x1C0, 0x9, 0x148, 0x9, 0x14A, 0x9, 0x082, 0xA, 0x19F, 0x9, 0x171, 0x9, 0x120, 0x9, 0x0E7, 0xA,
    0x1F3, 0x9, 0x14B, 0x9, 0x100, 0x9, 0x190, 0x6, 0x013, 0x9, 0x161, 0x9, 0x125, 0x9, 0x133, 0x9, 0x195, 0x9, 0x173,
    0x9, 0x1CA, 0x9, 0x086, 0x9, 0x1E9, 0x9, 0x0DB, 0x9, 0x1EC, 0x9, 0x08B, 0x9, 0x085, 0x5, 0x00A, 0x8, 0x096, 0x8,
    0x09C, 0x9, 0x1C3, 0x9, 0x19C, 0x9, 0x08F, 0x9, 0x18F, 0x9, 0x091, 0x9, 0x087, 0x9, 0x0C6, 0x9, 0x177, 0x9, 0x089,
    0x9, 0x0D6, 0x9, 0x08C, 0x9, 0x1EE, 0x9, 0x1EB, 0x9, 0x084, 0x9, 0x164, 0x9, 0x175, 0x9, 0x1CD, 0x8, 0x05E, 0x9,
    0x088, 0x9, 0x12B, 0x9, 0x172, 0x9, 0x10A, 0x9, 0x08D, 0x9, 0x13A, 0x9, 0x11C, 0xA, 0x1E1, 0xA, 0x1E0, 0x9, 0x187,
    0xA, 0x1DC, 0xA, 0x1DF, 0x7, 0x074, 0x9, 0x19F, 0x8, 0x08D, 0x8, 0x0E4, 0x7, 0x079, 0x9, 0x0EA, 0x9, 0x0E1, 0x8,
    0x040, 0x7, 0x041, 0x9, 0x10B, 0x9, 0x0B0, 0x8, 0x06A, 0x8, 0x0C1, 0x7, 0x071, 0x7, 0x078, 0x8, 0x0B1, 0x9, 0x14C,
    0x7, 0x043, 0x8, 0x076, 0x7, 0x066, 0x7, 0x04D, 0x9, 0x08A, 0x6, 0x02F, 0x8, 0x0C9, 0x9, 0x0CE, 0x9, 0x149, 0x9,
    0x160, 0xA, 0x1BA, 0xA, 0x19E, 0xA, 0x39F, 0x9, 0x0E5, 0x9, 0x194, 0x9, 0x184, 0x9, 0x126, 0x7, 0x030, 0x8, 0x06C,
    0x9, 0x121, 0x9, 0x1E8, 0xA, 0x1C1, 0xA, 0x11D, 0xA, 0x163, 0xA, 0x385, 0xA, 0x3DB, 0xA, 0x17D, 0xA, 0x106, 0xA,
    0x397, 0xA, 0x24E, 0x7, 0x02E, 0x8, 0x098, 0xA, 0x33C, 0xA, 0x32E, 0xA, 0x1E9, 0x9, 0x0BF, 0xA, 0x3DF, 0xA, 0x1DD,
    0xA, 0x32D, 0xA, 0x2ED, 0xA, 0x30B, 0xA, 0x107, 0xA, 0x2E8, 0xA, 0x3DE, 0xA, 0x125, 0xA, 0x1E8, 0x9, 0x0E9, 0xA,
    0x1CD, 0xA, 0x1B5, 0x9, 0x165, 0xA, 0x232, 0xA, 0x2E1, 0xB, 0x3AE, 0xB, 0x3C6, 0xB, 0x3E2, 0xA, 0x205, 0xA, 0x29A,
    0xA, 0x248, 0xA, 0x2CD, 0xA, 0x23B, 0xB, 0x3C5, 0xA, 0x251, 0xA, 0x2E9, 0xA, 0x252, 0x9, 0x1EA, 0xB, 0x3A0, 0xB,
    0x391, 0xA, 0x23C, 0xB, 0x392, 0xB, 0x3D5, 0xA, 0x233, 0xA, 0x2CC, 0xB, 0x390, 0xA, 0x1BB, 0xB, 0x3A1, 0xB, 0x3C4,
    0xA, 0x211, 0xA, 0x203, 0x9, 0x12A, 0xA, 0x231, 0xB, 0x3E0, 0xA, 0x29B, 0xB, 0x3D7, 0xA, 0x202, 0xB, 0x3AD, 0xA,
    0x213, 0xA, 0x253, 0xA, 0x32C, 0xA, 0x23D, 0xA, 0x23F, 0xA, 0x32F, 0xA, 0x11C, 0xA, 0x384, 0xA, 0x31C, 0xA, 0x17C,
    0xA, 0x30A, 0xA, 0x2E0, 0xA, 0x276, 0xA, 0x250, 0xB, 0x3E3, 0xA, 0x396, 0xA, 0x18F, 0xA, 0x204, 0xA, 0x206, 0xA,
    0x230, 0xA, 0x265, 0xA, 0x212, 0xA, 0x23E, 0xB, 0x3AC, 0xB, 0x393, 0xB, 0x3E1, 0xA, 0x1DE, 0xB, 0x3D6, 0xA, 0x31D,
    0xB, 0x3E5, 0xB, 0x3E4, 0xA, 0x207, 0xB, 0x3C7, 0xA, 0x277, 0xB, 0x3D4, 0x8, 0x0C0, 0xA, 0x162, 0xA, 0x3DA, 0xA,
    0x124, 0xA, 0x1B4, 0xA, 0x264, 0xA, 0x33D, 0xA, 0x1D1, 0xA, 0x1AF, 0xA, 0x39E, 0xA, 0x24F, 0xB, 0x373, 0xA, 0x249,
    0xB, 0x372, 0x9, 0x167, 0xA, 0x210, 0xA, 0x23A, 0xA, 0x1B8, 0xB, 0x3AF, 0xA, 0x18E, 0xA, 0x2EC, 0x7, 0x062, 0x4,
    0x00D
]


def rshift(val, n):
    return val >> n if val >= 0 else (val + 0x100000000) >> n


class Compression:

    def __init__(self):
        self._bit_num: int = 8
        self._tree_pos: int = 0
        self._value: int = 0x0
        self._mask: int = 0x80

    def decompress(self, src):
        dest = bytearray()

        while True:
            if self._bit_num == 8:
                if len(src) == 0:
                    return dest

                self._value = src[0]
                src = src[1:]
                self._bit_num = 0
                self._mask = 0x80

            if self._value & self._mask != 0:
                self._tree_pos = huffman_tree[self._tree_pos * 2]
            else:
                self._tree_pos = huffman_tree[self._tree_pos * 2 + 1]

            self._mask >>= 1
            self._bit_num += 1

            if self._tree_pos <= 0:
                # leaf
                if self._tree_pos == -256:
                    # special flush character
                    self._bit_num = 8  # flush rest of byte
                    self._tree_pos = 0  # start on tree top again
                    continue

                dest.append(-self._tree_pos)
                self._tree_pos = 0

    @staticmethod
    def compress(src):
        """https://sites.google.com/site/ultimaonlineoldpackets/client/compression"""
        bit_count = 0
        bit_value = 0
        dest = bytearray()

        for i in range(len(src)):
            p_entry = src[i] << 1

            bit_count += huffmanTable[p_entry]
            bit_value <<= huffmanTable[p_entry]
            bit_value |= huffmanTable[p_entry + 1]

            while bit_count >= 8:
                bit_count -= 8
                dest.append((rshift(bit_value, bit_count) & 0xFF))

        # terminal code
        p_entry = 0x200
        bit_count += huffmanTable[p_entry]
        bit_value <<= huffmanTable[p_entry]
        bit_value |= huffmanTable[p_entry + 1]

        # align on byte boundary
        if (bit_count & 7) != 0:
            bit_value <<= (8 - (bit_count & 7))
            bit_count += (8 - (bit_count & 7))

        while bit_count >= 8:
            bit_count -= 8
            dest.append((rshift(bit_value, bit_count) & 0xFF))

        return dest
